---
- hosts: all
  remote_user: vagrant
  become: true
  # gather_facts: no

  vars:
    email_admin: info@kitconcept.com
    jenkins_hostname: jenkins.kitconcept.io
    jenkins_admin_username: admin
    jenkins_admin_password: admin
    jenkins_repo_url: deb http://pkg.jenkins-ci.org/debian-stable binary/
    jenkins_repo_key_url: http://pkg.jenkins-ci.org/debian-stable/jenkins-ci.org.key
    jenkins_plugins_state: present
    # jenkins_plugins: [
    #   'workflow-aggregator'
    # ]
    my_jenkins_plugins:
      # Blue Ocean UI
      blueocean:
        pinned: no
        enabled: yes
      # Github
      github:
        enabled: yes
      # Green Jenkins Build Indicators
      greenballs:
        enabled: yes
      # Post Build Actions
      groovy-postbuild:
        enabled: yes
      # Robot Framework
      robot:
        enabled: yes
      # Static Code Analysis
      warnings:
        enabled: yes
      # Xvfb
      xvfb:
        enabled: yes
  roles:
    - role: geerlingguy.java
    - role: geerlingguy.jenkins
      become: true

  pre_tasks:

    # Install Python 2
    - name: Install Python 2
      become: true
      raw: test -e /usr/bin/python || (apt -y update && apt install -y python-minimal)

  tasks:

#    - name: Install Java 7
#      apt:
#        name: openjdk-7-jdk
#        state: present

    # Install Jenkins Plugins

    - name: Install plugins without a specific version
      jenkins_plugin:
        name: "{{ item.key }}"
        url_username: admin
        url_password: admin
        url: http://localhost:8080
      register: my_jenkins_plugin_unversioned
      when: >
        'version' not in item.value
      with_dict: "{{ my_jenkins_plugins }}"

    - name: Install plugins with a specific version
      jenkins_plugin:
        name: "{{ item.key }}"
        url_username: admin
        url_password: admin
        url: http://localhost:8080
        version: "{{ item.value['version'] }}"
      register: my_jenkins_plugin_versioned
      when: >
        'version' in item.value
      with_dict: "{{ my_jenkins_plugins }}"

    - name: Initiate the fact
      set_fact:
        jenkins_restart_required: no

    - name: Check if restart is required by any of the versioned plugins
      set_fact:
        jenkins_restart_required: yes
      when: item.changed
      with_items: "{{ my_jenkins_plugin_versioned.results }}"

    - name: Check if restart is required by any of the unversioned plugins
      set_fact:
        jenkins_restart_required: yes
      when: item.changed
      with_items: "{{ my_jenkins_plugin_unversioned.results }}"

    - name: Restart Jenkins if required
      service:
        name: jenkins
        state: restarted
      when: jenkins_restart_required

    - name: Wait for Jenkins to start up
      uri:
        url: http://localhost:8080
        status_code: 200
        timeout: 5
      register: jenkins_service_status
      # Keep trying for 5 mins in 5 sec intervals
      retries: 60
      delay: 5
      until: >
        'status' in jenkins_service_status and
        jenkins_service_status['status'] == 200
      when: jenkins_restart_required

    - name: Reset the fact
      set_fact:
        jenkins_restart_required: no
      when: jenkins_restart_required

    - name: Plugin pinning
      jenkins_plugin:
        name: "{{ item.key }}"
        url_username: admin
        url_password: admin
        url: http://localhost:8080
        state: "{{ 'pinned' if item.value['pinned'] else 'unpinned'}}"
      when: >
        'pinned' in item.value
      with_dict: "{{ my_jenkins_plugins }}"

    - name: Plugin enabling
      jenkins_plugin:
        name: "{{ item.key }}"
        url_username: admin
        url_password: admin
        url: http://localhost:8080
        state: "{{ 'enabled' if item.value['enabled'] else 'disabled'}}"
      when: >
        'enabled' in item.value
      with_dict: "{{ my_jenkins_plugins }}"

    - jenkins_job:
        config: "{{ lookup('file', 'pipeline.xml') }}"
        name: pipeline
        password: admin
        url: http://localhost:8080
        user: admin